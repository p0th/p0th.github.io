<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>学习记录</title>
    <link href="/2024/11/15/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <url>/2024/11/15/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h3 id="2024-11-12"><a href="#2024-11-12" class="headerlink" title="2024&#x2F;11&#x2F;12"></a>2024&#x2F;11&#x2F;12</h3><h3 id="linux查找命令"><a href="#linux查找命令" class="headerlink" title="linux查找命令"></a>linux查找命令</h3><p>ls &#x2F;        根目录下所有文件</p><p>ls -l显示文件和目录的详细资料</p><p>ls -R 连同子目录的内容一起列出(递归列出)，等于该目录下的所有文件都会显示出来</p><p>ls -a列出全部文件，包含隐藏文件</p><p>ls -lSr查看文件和目录列表(以文件大小升序查看)</p><p>ls -lh查看文件和目录的详情列表</p><p>pwd 现实工作路径</p><h3 id="2024-11-14"><a href="#2024-11-14" class="headerlink" title="2024&#x2F;11&#x2F;14"></a>2024&#x2F;11&#x2F;14</h3><p><strong>php变量覆盖</strong></p><p>主要是三个函数，<code>parse_str() 、extract()、import_request_variables()</code></p><p>当看到这三个函数时，应当向<strong>php变量覆盖</strong>的方向思考。</p><p><strong>1.</strong><code>parse_str() </code>函数把询字符串解析到变量中</p><p><strong>语法</strong><br><code>parse_str(string,array)</code></p><p><strong>2.</strong><code>extract()</code>函数从数组中将变量导入到当前的符号表</p><p>关于对<code>extract()</code>函数从数组中将变量导入到当前的符号表的解释，如下：</p><p>在PHP中，extract()函数的作用是从数组中将变量导入到当前的符号表，<strong>具体解释</strong>如下：</p><p><strong>符号表</strong></p><p>符号表是PHP在执行脚本时用于存储变量名和对应值的一种数据结构。它就像是一个记录所有变量信息的表格，PHP通过这个表格来查找和操作变量。</p><p><strong>变量导入</strong></p><p>当使用extract()函数时，它会遍历给定的数组。对于数组中的每个键值对，键会被当作变量名，值会被当作变量的值，然后将这些变量导入到当前的符号表中。这样，在当前的代码作用域内，就可以直接使用这些从数组中导入的变量名来访问相应的值，就好像这些变量是在当前作用域中通过常规的变量赋值语句定义的一样。</p><p>示例</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$data</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;name&#x27;</span> =&gt; <span class="hljs-string">&#x27;John&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span> =&gt; <span class="hljs-number">30</span>);<br><span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$data</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$name</span>; <span class="hljs-comment">// 输出 John</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$age</span>;  <span class="hljs-comment">// 输出 30</span><br></code></pre></td></tr></table></figure><p>在上述示例中，extract()函数将$data数组中的变量导入到当前符号表，之后便可以直接使用$name和$age变量。</p><p><strong>语法</strong><br><code>extract(array,extract_rules,prefix)</code><br>第一个参数为指定的数组，第二个为创建变量的规则，第三个为需要增加的前缀。</p><blockquote><p>[!CAUTION]</p><p><u>1.array必需。规定要使用的数组。</u><br><u>2.extract_rules  可选。extract() 函数将检查每个键名是否为合法的变量名，同时也检查和符号表中已存在的变量名是否冲突。对不合法和冲突的键名的处理将根据此参数决定。</u><br>可能的值：</p><p>​<strong>EXTR_OVERWRITE - 默认。如果有冲突，则覆盖已有的变量。</strong><br>​EXTR_SKIP - 如果有冲突，不覆盖已有的变量。<br>​EXTR_PREFIX_SAME - 如果有冲突，在变量名前加上前缀 prefix。<br>​EXTR_PREFIX_ALL - 给所有变量名加上前缀 prefix。<br>​EXTR_PREFIX_INVALID - 仅在不合法或数字变量名前加上前缀 prefix。<br>​EXTR_IF_EXISTS - 仅在当前符号表中已有同名变量时，覆盖它们的值。其它的都不处理。<br>​EXTR_PREFIX_IF_EXISTS - 仅在当前符号表中已有同名变量时，建立附加了前缀的变量名，其它的都不处理。EXTR_REFS - 将变量作为引用提取。导入的变量仍然引用了数组参数的值。<br><u>3.prefix  可选。如果 extract_rules 参数的值是 EXTR_PREFIX_SAME、EXTR_PREFIX_ALL、 EXTR_PREFIX_INVALID 或 EXTR_PREFIX_IF_EXISTS，则 prefix 是必需的。该参数规定了前缀。前缀和数组键名之间会自动加上一个下划线。</u></p></blockquote><p><strong>3.</strong><code>import_request_variables()</code>函数将 <code>GET／POST／Cookie </code>变量导入到全局作用域中。<strong>该函数在最新版本的 PHP 中已经不支持。</strong></p><blockquote><p>[!CAUTION]</p><p><strong>版本要求：PHP 4 &gt;&#x3D; 4.1.0, PHP 5 &lt; 5.4.0</strong></p></blockquote><p><strong>语法</strong><br><code>bool import_request_variables ( string $types [, string $prefix ] )</code>返回bool型结果。</p><blockquote><p>[!CAUTION]</p><p><strong>$types：</strong></p><p>​指定需要导入的变量，可以用字母 G、P 和 C 分别表示 GET、POST 和 Cookie，这些字母不区分大小写，所以你可以使用 <strong>g 、 p 和 c 的任何组合</strong>。POST 包含了通过 POST 方法上传的文件信息。注意这些字母的顺序，当使用 gp 时，POST 变量将使用相同的名字覆盖 GET 变量。<strong>任何 GPC 以外的字母都将被忽略。</strong><br><strong>$prefix：</strong> </p><p>​变量名的前缀，置于所有被导入到全局作用域的变量之前。所以如果有个名为 userid 的 GET 变量，同时提供了 pref_ 作为前缀，那么将获得一个名为 $pref_userid 的全局变量。</p><p>​虽然 prefix 参数是可选的，但如果不指定前缀，或者指定一个空字符串作为前缀，将获得一个 E_NOTICE 级别的错误。</p></blockquote><h3 id="2024-11-15"><a href="#2024-11-15" class="headerlink" title="2024&#x2F;11&#x2F;15"></a>2024&#x2F;11&#x2F;15</h3><h2 id="一些php绕过"><a href="#一些php绕过" class="headerlink" title="一些php绕过"></a>一些php绕过</h2><p><strong>1.</strong><code>无字母数字REC</code></p><p><img src="/../images/%E6%97%A0%E5%AD%97%E6%AF%8D%E6%95%B0%E5%AD%97REC.png" alt="p"></p><p>在输入payload时，需要知道这个：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?</span><br>(<span class="hljs-string">&quot;phpinfo&quot;</span>)();<span class="hljs-comment">#动态函数调用，在第一个括号里输入函数名，第二个里输入参数</span><br></code></pre></td></tr></table></figure><p>因为<strong>不能输入字母或数字</strong>，而在PHP中可以使用<strong>异或</strong>和<strong>取反</strong>来达到目的，示例代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span>=<span class="hljs-string">&quot;ls&quot;</span>;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$a</span>);<span class="hljs-variable">$i</span>++)&#123;<br>    <span class="hljs-keyword">echo</span><span class="hljs-string">&quot;%&quot;</span>.<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$a</span>[<span class="hljs-variable">$i</span>])^<span class="hljs-number">0xff</span>);<br>&#125;<br><span class="hljs-keyword">echo</span><span class="hljs-string">&quot;^&quot;</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$a</span>);<span class="hljs-variable">$i</span>++)&#123;<br>    <span class="hljs-keyword">echo</span><span class="hljs-string">&quot;%ff&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span>               <span class="hljs-comment">#xor生成命令</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span>=<span class="hljs-string">&quot;&quot;</span>;         <span class="hljs-comment">#此处输入命令</span><br><span class="hljs-keyword">echo</span><span class="hljs-string">&quot;~(&quot;</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$a</span>);<span class="hljs-variable">$i</span>++)&#123;<br>    <span class="hljs-keyword">echo</span><span class="hljs-string">&quot;%&quot;</span>.<span class="hljs-title function_ invoke__">bin2hex</span>(~<span class="hljs-variable">$a</span>[<span class="hljs-variable">$i</span>];)<br>&#125;<br><span class="hljs-keyword">echo</span><span class="hljs-string">&quot;)&quot;</span>;<br><span class="hljs-meta">?&gt;</span>               <span class="hljs-comment">#~生成命令</span><br></code></pre></td></tr></table></figure><p><strong>2.</strong><code>巨多条件过滤</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-comment">//flag.php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;code&#x27;</span>])) <br>&#123;<br>    <span class="hljs-variable">$code</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;code&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$code</span>) &gt; <span class="hljs-number">18</span>)<br>    &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;You really long, but i dont like more than 18&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\w/&quot;</span>, <span class="hljs-variable">$code</span>))<br>    &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;i dislike it&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/&amp;|\||\^|\~|\!/&quot;</span>, <span class="hljs-variable">$code</span>))<br>    &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;stop calculating&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\(|\)&quot;</span>, <span class="hljs-variable">$code</span>))<br>    &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;call function is not safe&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\&#123;|\&#125;|\[|\]/&quot;</span>, <span class="hljs-variable">$code</span>))<br>    &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;fxcking brackets&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\\$|@|\./&quot;</span>, <span class="hljs-variable">$code</span>))<br>    &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;<span class="hljs-subst">$1</span> dou bu gei wo&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$code</span>);<span class="hljs-comment">//I believe that those noob hackers cannot hack me.</span><br>&#125;<span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="答案如下："><a href="#答案如下：" class="headerlink" title="答案如下："></a>答案如下：</h4><p><img src="/../images/payload.png" alt="p"></p><h4 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h4><p><img src="/../images/1.png" alt="p"></p><p>所有能够把所有的文件都检索出来……..</p>]]></content>
    
    
    
    <tags>
      
      <tag>-learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>p0th是你大坝！</title>
    <link href="/2024/11/12/p0th%E6%98%AF%E4%BD%A0%E5%A4%A7%E5%9D%9D%EF%BC%81/"/>
    <url>/2024/11/12/p0th%E6%98%AF%E4%BD%A0%E5%A4%A7%E5%9D%9D%EF%BC%81/</url>
    
    <content type="html"><![CDATA[<p><img src="/../images/1.jpg" alt="p"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/11/12/hello-world/"/>
    <url>/2024/11/12/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
